import logging
from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
from pymongo import MongoClient
from passlib.context import CryptContext
from jose import JWTError, jwt
from typing import List
from fastapi.security import OAuth2PasswordBearer

# MongoDB Setup
client = MongoClient("mongodb://localhost:27017/")
db = client["user_db"]
users_collection = db["users"]

# FastAPI Setup
app = FastAPI()

# OAuth2 Scheme
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# Logging Setup
logging.basicConfig(level=logging.INFO)

# JWT Token settings
SECRET_KEY = "a_secret_key"
ALGORITHM = "HS256"

# Password Hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str):
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(data: dict):
    to_encode = data.copy()
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        return None

# Pydantic Models
class User(BaseModel):
    username: str
    email: str
    password: str

class UserInDB(User):
    hashed_password: str

class Token(BaseModel):
    access_token: str
    token_type: str

# Helper function for logging requests
def log_request(request):
    logging.info(f"Request: {request}")

# User CRUD Operations
@app.post("/create_user/")
async def create_user(user: User):
    hashed_password = hash_password(user.password)
    user_in_db = UserInDB(username=user.username, email=user.email, hashed_password=hashed_password)
    users_collection.insert_one(user_in_db.dict())
    log_request(f"Created user: {user.username}")
    return {"msg": "User created successfully"}

@app.post("/login/")
async def login(user: User):
    db_user = users_collection.find_one({"username": user.username})
    if db_user and verify_password(user.password, db_user["hashed_password"]):
        token = create_access_token(data={"sub": db_user["username"]})
        log_request(f"User logged in: {user.username}")
        return {"access_token": token, "token_type": "bearer"}
    raise HTTPException(status_code=401, detail="Invalid credentials")

@app.get("/secure_data/")
async def get_secure_data(token: str = Depends(oauth2_scheme)):
    user = verify_token(token)
    if user:
        log_request(f"Accessed secure data by: {user['sub']}")
        return {"msg": "Secure data"}
    raise HTTPException(status_code=403, detail="Invalid or expired token")

@app.get("/get_user/{username}")
async def get_user(username: str, token: str = Depends(oauth2_scheme)):
    user = verify_token(token)
    if not user:
        raise HTTPException(status_code=403, detail="Invalid or expired token")
    db_user = users_collection.find_one({"username": username})
    if db_user:
        return {"username": db_user["username"], "email": db_user["email"]}
    raise HTTPException(status_code=404, detail="User not found")

# Role-based Access Control (RBAC) - Example
def check_role(token: str, required_role: str):
    user = verify_token(token)
    if user and user.get("role") == required_role:
        return user
    raise HTTPException(status_code=403, detail="Access forbidden")

@app.get("/admin_dashboard/")
async def admin_dashboard(token: str = Depends(oauth2_scheme)):
    check_role(token, "admin")
    return {"msg": "Welcome to the admin dashboard"}

# Deployable Setup (example)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
